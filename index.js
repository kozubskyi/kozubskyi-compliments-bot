const TelegramBot = require("node-telegram-bot-api")
const dotenv = require("dotenv")
const path = require("path")
const axios = require("axios")

dotenv.config()
const { BOT_TOKEN, KOZUBSKYI_CHAT_ID, LENA_RAK_CHAT_ID, DATABASE_URL } = process.env

const bot = new TelegramBot(BOT_TOKEN, { polling: true })

bot.setMyCommands([
  // { command: "/start", description: "–ù–∞—á–∞—Ç—å" },
  { command: "/compliment", description: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫" },
])

// üëá –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on("message", (msg) => {
  makeResponse({
    firstName: msg.from.first_name,
    lastName: msg.from.last_name,
    username: msg.from.username,
    command: msg.text,
    chatId: msg.chat.id,
  })
})

// üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
// bot.on("callback_query", (cb) => {
//   makeResponse({
//     firstName: cb.from.first_name,
//     lastName: cb.from.last_name,
//     username: cb.from.username,
//     command: cb.data,
//     chatId: cb.message.chat.id,
//   })
// })

async function makeResponse({ firstName, lastName, username, command, chatId }) {
  const sweet = "lena_rak_05"
  const creator = "kozubskyi"
  const sweetChatId = Number(LENA_RAK_CHAT_ID)
  const creatorChatId = Number(KOZUBSKYI_CHAT_ID)
  let response
  let buttonOptions = {}

  try {
    if (username === sweet) {
      if (command === "/start") {
        response =
          "–õ–µ–Ω—É—Å–∏–∫, –ø—Ä–∏–≤–µ—Ç–∏–∫) üòò –î–µ–Ω–∏—Å –ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–±–µ –∫—É—á—É –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ /compliment –∏ –ø–æ–ª—É—á–∏—à—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫)"
      } else if (command === "/compliment") {
        const { data } = await axios.get(DATABASE_URL)
        const randomIndex = Math.floor(Math.random() * data.length)

        response = data[randomIndex].text
      } else {
        response = "–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ç–æ, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª–∞) üòò"
      }
    } else if (username === creator) {
      const [adminCommand, newData] = splitMessage(command)

      if (adminCommand === "add") {
        await axios.post(DATABASE_URL, { text: newData })

        response = "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
      } else if (adminCommand === "del") {
        await axios.delete(`${DATABASE_URL}/${newData}`)

        response = "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
      } else if (adminCommand === "mlr") {
        await bot.sendMessage(sweetChatId, newData)

        response = "–°–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–∏–º–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
      } else if (adminCommand === "msg") {
        const [receiverChatId, text] = splitMessage(newData)

        await bot.sendMessage(Number(receiverChatId), text)
        response = "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
      } else if (command === "/all") {
        const { data } = await axios.get(DATABASE_URL)

        response = JSON.stringify(data)
      } else if (command === "/help") {
        response =
          "'add _' - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º _; 'del _' - —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫ —Å –∏–Ω–¥–µ–∫—Å–æ–º _; 'cfd _' - –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ _; 'mlr _' - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ –†–∞–∫ —Å —Ç–µ–∫—Å—Ç–æ–º _; 'msg _ __' - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id —á–∞—Ç–∞ _ –∏ —Ç–µ–∫—Å—Ç–æ–º __; '/all' - –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ entries –≤—Å–µ—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫–æ–≤."
      } else {
        response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
      }
    } else {
      if (command === "/start" || command === "/compliment") {
        response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í—ã –Ω–µ –ï–ª–µ–Ω–∞ –†–∞–∫, –∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫–∏ —è –¥–µ–ª–∞—é —Ç–æ–ª—å–∫–æ –µ–π ü§∑‚Äç‚ôÇÔ∏è"
        // buttonOptions = {
        //   reply_markup: JSON.stringify({
        //     inline_keyboard: [[{ text: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫", callback_data: "/compliment" }]],
        //   }),
        // }
      } else {
        response = "–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ç–æ, —á—Ç–æ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ üòâ"
      }
    }

    await bot.sendMessage(chatId, response, buttonOptions)

    username !== creator &&
      bot.sendMessage(
        creatorChatId,
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${firstName} ${lastName} <${username}> (${chatId})' –æ—Ç–ø—Ä–∞–≤–∏–ª(-–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ '${command}' –∏ –ø–æ–ª—É—á–∏–ª(-–∞) –æ—Ç–≤–µ—Ç '${response}'`
      )
  } catch (error) {
    username !== creator && (await bot.sendMessage(chatId, "–Ø –Ω–µ–º–Ω–æ–∂–∫–æ —Å–ª–æ–º–∞–ª—Å—è, —Å–∫–æ—Ä–æ –ø–æ—á–∏–Ω—é—Å—å –∏ –≤–µ—Ä–Ω—É—Å—å üë®‚Äçüîß‚öôÔ∏èüòä"))

    bot.sendMessage(
      creatorChatId,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${firstName} ${lastName} <${username}> (${chatId})' –æ—Ç–ø—Ä–∞–≤–∏–ª(-–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ '${command}' –∏ –ø–æ–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ '${error.message}'`
    )
  }
}

function splitMessage(msg) {
  const msgArr = msg.split(" ")
  let data = msgArr[0]
  let text = msgArr.slice(1).join(" ")

  return [data, text]
}